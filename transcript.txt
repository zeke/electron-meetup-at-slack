This transcript was generated using https://www.temi.com

Starting at https://www.youtube.com/watch?v=Qirdy1TP1Rw&feature=youtu.be&t=56m12s

---

Who needs it when you say completely outdated anyway, I'm just gonna. Give it over to zig was great, so please give it up. Physique everyone. Hello? Oh, oh, thanks for having me here. You looks. I'm really happy to be here and happy with the turnout. Thanks everyone for coming. Um, my name's Ed. I work a good job. Um, uh, um, on the electronic team were mostly remote team, I think. No two members live in the same city. Very sorry I got interrupted your quick run over there and turn off the music thing. No music for this presentation. So I guess so I'm going to be talking about, I'm the maintainer group, the people that actually maintain electron, um, day to day and kind of how we operate and how we keep the project healthy. Um, so if you were here to learn specifically about electron APP development, there's a little bit for you at the end, but mostly, um, this is more about kind of how to run an open source project. 

So I'm the good hub electron team is seven people. Um, some of us were pretty new. I've been on the team for about two years. Jacob groundwater is also here with us somewhere. Jacob, are you in the room? Maybe Jacob bailed, but he should be around somewhere. Um, we also have people from slack who are part of our maintainers group. Of course, Felix, Matt Crocker, who wins the prize for really cool Avatar. Um, some other people like [inaudible] who's also here. Where's the Tisch? Raise your hand. All right. So if you want a slack electron expertise now you kind of know who to go to in the room. Uh, and then some slacks kinda been with electron for a long time, like good buddies for years now, but more recently Microsoft has really kind of invested in electron. So skype is an electron app, uh, visual studio code, um, and they're coming out with more and more apps based on electron. 

So they're, they're pretty invested at this point in the successful electron. Um, so there's actually now a, a Microsoft team that works entirely on electron and this has been such a good thing for the health of the project. Overall. Get hub is our. Microsoft is very concerned about security, um, and a lot of things that John was talking about in her talk are, um, you know, really important things to, to Microsoft, so they're, they're kind of pushing the way forward on keeping chromium up to date and electron. Um, and that's been their main. Their main focus is like when new versions of chromium come come out, let's stay on the ball so we can actually get the electronic release cadence more in line with the chromium because uh, the faster, the healthiest path to security is actually just continually updating and staying as close to chrome versions as you can because that's where most of the vulnerabilities come from. 

So this group of Microsoft people, they're on our call every single week, so we have very close connections with them. So the project has really grown beyond it. Like it was started at get hub, but now they're all these big companies investing in it. So the health of the project is now I'm feeling optimistic about electrons future based on this investment from these companies. Also just lots of other people working on it. It's not just these big companies, there are lots of little app developers, uh, helping keep electron alive and well. Um, so I wanna just talk a little bit about the workflows that we use mostly on get hub. So if you haven't seen this page on Github.com, it's a, I think it was released in the last few months. It's a community checklist where you can make sure that your project is actually adhering to some standards that make it welcoming to contributors. 

Like, you know, having a, having a read me I a code of conduct, I'm heading a contributing guide, so literally documentation on how to participate in the project, having a license and issue templates. So we took a long time to actually start using templates on electronic project. But when we did it was like, it was such a huge win and it was all we had to do was write a markdown file and committed to our repository. So here's an example of an issue template. Um, now that you know, an issue that was created using the template, now that we have it. So when someone comes to like triage this issue or try to solve it, it's actually like really straight forward, there's like a reproduction case and you can see what the expected behavior is and the actual behavior. So if you're maintaining a project, this is like really low hanging fruit to make it easier for people to help out. 

Um, so another thing that we do, we have like a hundred and 50 people in the maintainers group who, um, have write access to every repository, every public repository and electron organization, which seems a little bit dangerous. But the idea behind it is that we want everyone who, who joins the group to feel like an owner of the project. So anyone can create new repositories. They can create branches on existing repositories. So rather if you want to contribute to her electron here in this maintainers group, you don't have to fork electron and open pr is from your branches and everything like that. You can create your own branches right on electron. So, um, we've worked really hard to come up with a model that keeps people outside of get a feeling as included in the project and as, as flexible as possible. So we also use brands protection on, on all our repos. 

So this is sort of the way that we make sure that yes, even though everyone has like, he's to do all kinds of stuff, they can't actually do anything super dangerous like release a new version of electronics, dental or something like that. So, um, it has all these really incredible granular features for like controlling which branch was going to be pushed to by whom and things like that. So we have tons of bots to, on the electronic org. Um, so some of these are pretty experimental Coi reporter is actually super useful. It's kind of a new thing, but if someone opens a pull request and Coi fails for whatever reason, this Bot will actually find the failing message within the output and comment on the issue saying, you know, this happened, which normally that's the job I was like a maintainer of a project to be like, OK, so this didn't pass in this, this, this person who submitted this pr doesn't necessarily know they come back and look at the issue and see that yeah, I failed. 

So it's just automating away something that humans shouldn't necessarily have to do. So other ones like wip is literally just a tiny little excess like status check that says if WPI wip is in the title of the Pr, then it shouldn't be mergeable yet. So it's kind of like taking these conventions that people have created on get hub and sort of like solidifying them into something real. Um, access. Lynne is really cool. It's, we use it on the website and it's just the spot that makes sure that pr is. Don't introduce a, you know, html is not taking accessibility into account. So this is again, like important stuff, but it's easier for humans to miss. So good to have bots in place for this. We use green keeper all over the place. Green keeper is a good hub APP that monitors your projects, um, dependencies and opens, pull requests automatically when new versions of those dependencies come out. 

So we have this all over the place. Again, a fewer bottlenecks here. We're humans having to do tedious work. So last week, this is a kind of a shameless plug, but I created this new blog called release notifier. And the, the idea is that um, you know, a lot of people will open a pull request, especially on electron and sometimes it takes a while before it actually lands in a release that might be a month. So people comment on the issue saying like, which version did this come out in? Is this an electron yet? And so this Bot exists now to kind of solve that problem. So in theory we could also do it on issues too. So right now it just comments on pull requests. But if the pull requests is tied to an issue, could actually comment on the issue as well, so everyone subscribed would get that notification. 

So a lot of the apps that I showed on that previous screen are made with this project called pro bought a. it's an entirely open source projects created by good hub where, um, you basically have access to webhooks. I'm on all events on a, on get a like scopes to an organization for a specific repository. And robot is like a on any event, you're, you run this project server and on any event your event handler is given a good hub api client that's already authenticated and has full access to do anything you want on this. Basically this very lean and responsive robot that can react to any activity on get hub and do all kinds of things like open comments or merge pull requests or tell people that they're using offensive language or all kinds of things. So we use the profile like all over the place on electron and it's becoming more and more an important part of our, our process. 

So also semantic release is something that we've embraced, like, um, we were kind of in general, the team was a little bit skeptical about this idea, but once we actually started using it on a few projects, we realized that it was really valuable. So the idea behind semantic release is you enforce a commit message convention when using kits so people have to use some kind of prefix when they're submitting a changes to the repository. So like the basic ones are fixed feature, which is fat or breaking change. And the idea here is like, um, whenever a change lands in your project in a release, excuse me, I read the release should just happen automatically without human intervention based on changes just being shipped. So based on, uh, the semantic meaning of these commit messages, semantic release just knows whether to do a major, minor or patch bump on your, on your project. 

So it uses, um, travis by default, but it works with other, the providers as well. So the just here is, I'm using our workflow where any maintainer is also, um, has write access to everything. Um, we can actually set up a flow where I'm, no humans are blocking the processes, something actually being deployed into production either as part of electron project itself or the electronic websites or on the website or all these constituent pieces, modules that make up the electron ecosystem. So we haven't rolled this out on electron yet, but, um, it's in the works. So this is how this, this little slide is just how you would set up a semantic released on your project. And if you're an open open source maintainer, this will change your life a lot, lot less grunt work. So here's an example of like, um, one of the things that people worry about when like starting to use semantic release is, um, they don't want to have to enforce their, like a rule on people who are making contributions. So as a maintainer, you can actually do like a merge commit or a squash commit when merging a pr and your had your own prefix. So you don't have to make your contributors like follow your specific goals. They can still commit messages however they want. And you can write your own when you merged. 

So I'm just going to talk a little bit about, um, stuff that's coming in electron, uh, or that's happening right now. So at Microsoft's urging, which was I think, prudent, we're going to start following semantic versioning. So in the past you've, if you've used electronic before, you know, the versioning system was kind of willy nilly. So like no one point five would be one version of chromium and one point six would be another version of chromium and the one isn't moving. So we didn't really follow some verse so it was sort of like there was no clear versioning system. I'm moving forward starting with two point now we're actually going to be making an attempt to follow semantic versioning. So I'm a numbers. It's probably if you're familiar with like, you know, a lot of projects that had kind of like bite the bullet on this, like react at one point went from zero to 14 to $15, zero or something like that. 

So this is, this is kind of that same moment for electron. So [inaudible] will be the beginning of the major versions of electronic moving, you know, incrementing a lot faster. So Electron [inaudible] we might get a Beta out this week, a weird sound. So close a electron [inaudible] who's going to have chromium? Sixty two in it probably might be 61, not entirely sure. Um, but to illustrate here, electron three will probably be 63, 63. Um, but if we did like a major version bump of node, that would also be a major version bump of electron. So the numbers are going to go up faster. A chill actually be able to derive some meaning from the numbers moving forward. So in November we launched our localized website which has now written a note and we've seen a lot more contributions from people because the previous website was written in Jekyll and we sort of got as much out of out of it as we could until we finally had to rewrite the thing to note. 

But we're using this translate, this localization platform called crowd in, which is really awesome. It's like a, it's a tool that integrates with hub and allows people to do collaborative translation on your documentation and automatically generates pull requests to get hub. So it's pretty slick in the time since we launched in November. So if within three months I have hundred people just organically jumped in and translated content into 23 or maybe even now 24 languages. So this is going pretty smoothly. I'm not up to one day in the audience there who is one of our localization proofreaders and it's really good to have you here. Um, we have all these localization people, you know, translators all over the world and it's nice to actually meet some of these people in real life and see that they're humans. Um, so the node js project last week or maybe the week before just announced, they're actually going to adopt the model that we used for, um, localizing notice documentation as well. 

So they're going to be using crowd in, they're going to use a similar flow for like taking content out of the node, repo the docs and moving onto the known website. So this is good for electronic because now we have like someone else who has the same, you know, a much bigger project that has, is going to have some of the same um, challenges we can, we can, we're basically like attaching onto the node community. We can share a lot of this work together. So here's the progress on translation so far has been really remarkable. People just jumping in from random places and yeah, there's just hundreds of translations pouring and everyday it's really cool. Um, electron APP registry. So today if you go to electron js.org and you look at apps is not a place that you go to be like Ooh, where's that cool APP that I need? 

Like it's not, it's not an APP store, it's like sort of a proof that the electron have to do actually exist, but it doesn't really like fulfill a need to like find us tub. However, there are probably by now 30,000 breaches, repos that depend on electron and maybe 22,000 of those are non forks. So, um, there's a lot of really good stuff in there and it's all about like discovering it. Um, so I think it's our job to have to drop to like surface this and make it more obvious to people like what's out there, what apps exist already, let's not try to like solve problems that have already been solved by existing apps. And also we constantly get people saying like, I have this cool electron app, like can you put it on the homepage? And we sort of did that for like a year or so, and then, you know, it's not, it's not a sustainable thing and we don't want to play favorites. So we're kind of rolling out this new idea of like let's feature apps by numerous different criteria so that every advocates a chance to like have it stay on the sun on the website. So a lot of this stuff is kind of already built. Some of it is in the works. Of course all of this is open source to have any of you are interested in participating or commenting. Please do, um, other things in the works. 

So people like Felix are contributing really incredible documentation to electron right now, like the feelings just added the security checklist, that's like 20 items that is like just this huge laundry list of things that you need to be aware of or maybe you don't need to be aware of them, but you need to be aware like if you're changing some settings, you should be aware of the implications. So we have lots of this really useful documentation but it's not particularly structured. So something that's going to come to the website is like just a away from people to go page zero, how do I set up my development environment, how do I install electron, how do I create an APP, what are my options for actually packaging apps and deploying them like that. So, um, that's, that's something our team is going to be working on. 

Also, if you've ever tried to set up auto updating with electron before, it's like pretty, not that fun, but a new update just came out to this thing called Squirrel, which was sort of like the internal thing that manages pinging the mothership to see if there's a new version of your APP available that's actually been updated to now not require you to run your own server just to like your own web server, just to hand out those updates. So auto updating apps, that's going to be easier if you've already done it then you already went over, went through the work, but if you haven't yet, it's probably going to be pretty easy in the future. Um, and then, like I said, semantic regional releases of electronic coming soon. So we're trying to remove like anywhere where we can remove humans from the equation. That's, that's what we're trying to do, just to keep things flowing smoothly. 

That's all. I just wanted to say, uh, this slide deck was created with mark, which is a cool little electronic app for making slide x out of markdown files. And if you've heard of electron forge that you've probably heard of electronic storage before, but you may not have known that it has this install command, which actually, you know, if you're, if you don't want to cut your track pad or your mouse, you can actually install electronic spray from get hub with this, with this Cli. So this is like username repository and as long as it works on windows and Mac and stuff. So as long as that APP has like a release that's assets on get hub, like the [inaudible] or zips or [inaudible] or whatever, kind of like a home brew for electronic apps. That's all I got is, are we taking questions? I think we should actually, I have fun with the audience for documentation purposes. How many of you have fun but not as many as I wanted to. How many of you have felt have electronic builder? Same people. Say, how many of you are human? OK. So yeah, same people, surprisingly. Um, yeah. And any questions for Hola? Hola.